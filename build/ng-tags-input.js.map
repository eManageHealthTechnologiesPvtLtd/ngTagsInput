{"version":3,"file":null,"sources":["/Users/vijay/ngTagsInput/src/constants.js","/Users/vijay/ngTagsInput/src/tags-input.js","/Users/vijay/ngTagsInput/src/tag-item.js","/Users/vijay/ngTagsInput/src/auto-complete.js","/Users/vijay/ngTagsInput/src/auto-complete-match.js","/Users/vijay/ngTagsInput/src/autosize.js","/Users/vijay/ngTagsInput/src/bind-attrs.js","/Users/vijay/ngTagsInput/src/selectall.js","/Users/vijay/ngTagsInput/src/transclude-append.js","/Users/vijay/ngTagsInput/src/configuration.js","/Users/vijay/ngTagsInput/src/util.js","/Users/vijay/ngTagsInput/build/tmp/compiled-templates.js","/Users/vijay/ngTagsInput/src/init.js"],"sourcesContent":["export default {\n  KEYS: {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    escape: 27,\n    space: 32,\n    up: 38,\n    down: 40,\n    left: 37,\n    right: 39,\n    delete: 46,\n    comma: 188\n  },\n  MAX_SAFE_INTEGER: 9007199254740991,\n  SUPPORTED_INPUT_TYPES: ['text', 'email', 'url']\n};\n\n","/**\n * @ngdoc directive\n * @name tagsInput\n * @module ngTagsInput\n *\n * @description\n * Renders an input box with tag editing support.\n *\n * @param {string} ngModel Assignable Angular expression to data-bind to.\n * @param {boolean=} [useStrings=false] Flag indicating that the model is an array of strings (EXPERIMENTAL).\n * @param {string=} [template=NA] URL or id of a custom template for rendering each tag.\n * @param {string=} [templateScope=NA] Scope to be passed to custom templates - of both tagsInput and\n *    autoComplete directives - as $scope.\n * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\n * @param {string=} [keyProperty=text] Property to be used as a unique identifier for the tag.\n * @param {string=} [type=text] Type of the input element. Only 'text', 'email' and 'url' are supported values.\n * @param {string=} [text=NA] Assignable Angular expression for data-binding to the element's text.\n * @param {number=} tabindex Tab order of the control.\n * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\n * @param {number=} [minLength=3] Minimum length for a new tag.\n * @param {number=} [maxLength=MAX_SAFE_INTEGER] Maximum length allowed for a new tag.\n * @param {number=} [minTags=0] Sets minTags validation error key if the number of tags added is less than minTags.\n * @param {number=} [maxTags=MAX_SAFE_INTEGER] Sets maxTags validation error key if the number of tags added is greater\n *    than maxTags.\n * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\n *    the input element when the directive loses focus.\n * @param {string=} [removeTagSymbol=Ã—] (Obsolete) Symbol character for the remove tag button.\n * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\n * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\n * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\n * @param {boolean=} [addOnBlur=true] Flag indicating that a new tag will be added when the input field loses focus.\n * @param {boolean=} [addOnPaste=false] Flag indicating that the text pasted into the input field will be split into tags.\n * @param {boolean=} [addOnTab=false] Flag indicating that a new tag will be added on pressing the TAB key. \n * @param {string=} [pasteSplitPattern=,] Regular expression used to split the pasted text into tags.\n * @param {boolean=} [replaceSpacesWithDashes=true] Flag indicating that spaces will be replaced with dashes.\n * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\n * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into the new tag\n *    input box instead of being removed when the backspace key is pressed and the input box is empty.\n * @param {boolean=} [addFromAutocompleteOnly=false] Flag indicating that only tags coming from the autocomplete list\n *    will be allowed. When this flag is true, addOnEnter, addOnComma, addOnSpace and addOnBlur values are ignored.\n * @param {boolean=} [spellcheck=true] Flag indicating whether the browser's spellcheck is enabled for the input field or not.\n * @param {expression=} [tagClass=NA] Expression to evaluate for each existing tag in order to get the CSS classes to be used.\n *    The expression is provided with the current tag as $tag, its index as $index and its state as $selected. The result\n *    of the evaluation must be one of the values supported by the ngClass directive (either a string, an array or an object).\n *    See https://docs.angularjs.org/api/ng/directive/ngClass for more information.\n * @param {expression=} [onTagAdding=NA] Expression to evaluate that will be invoked before adding a new tag. The new\n *    tag is available as $tag. This method must return either a boolean value or a promise. If either a false value or a rejected\n *    promise is returned, the tag will not be added.\n * @param {expression=} [onTagAdded=NA] Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n * @param {expression=} [onInvalidTag=NA] Expression to evaluate when a tag is invalid. The invalid tag is available as $tag.\n * @param {expression=} [onTagRemoving=NA] Expression to evaluate that will be invoked before removing a tag. The tag\n *    is available as $tag. This method must return either a boolean value or a promise. If either a false value or a rejected\n *    promise is returned, the tag will not be removed.\n * @param {expression=} [onTagRemoved=NA] Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n * @param {expression=} [onTagClicked=NA] Expression to evaluate upon clicking an existing tag. The clicked tag is available as $tag.\n * @param {boolean=} [allowDblclickToEdit=false] Flag indicating that allow double click to edit current tag.\n * @param {string=} [inputSplitPattern=null] Regular expression that split edit input tags.\n */\nexport default function TagsInputDirective($timeout, $document, $window, $q, tagsInputConfig, tiUtil, tiConstants) {\n  'ngInject';\n\n  function TagList(options, events, onTagAdding, onTagRemoving) {\n    let self = {};\n\n    let getTagText = tag => tiUtil.safeToString(tag[options.displayProperty]);\n    let setTagText = (tag, text) => {\n      tag[options.displayProperty] = text;\n    };\n\n    let canAddTag = tag => {\n      let tagText = getTagText(tag);\n      let valid = tagText &&\n        tagText.length >= options.minLength &&\n        tagText.length <= options.maxLength &&\n        options.allowedTagsPattern.test(tagText) &&\n        !tiUtil.findInObjectArray(self.items, tag, options.keyProperty || options.displayProperty);\n\n      return $q.when(valid && onTagAdding({ $tag: tag })).then(tiUtil.promisifyValue);\n    };\n\n    let canRemoveTag = tag => $q.when(onTagRemoving({ $tag: tag })).then(tiUtil.promisifyValue);\n\n    self.items = [];\n\n    self.addText = text => {\n      let tag = {};\n      setTagText(tag, text);\n      return self.add(tag);\n    };\n\n    self.addTextArr = textArr => {\n      textArr.forEach(text => self.addText(text));\n    }\n\n    self.add = tag => {\n      let tagText = getTagText(tag);\n\n      if (options.replaceSpacesWithDashes) {\n        tagText = tiUtil.replaceSpacesWithDashes(tagText);\n      }\n\n      setTagText(tag, tagText);\n\n      return canAddTag(tag)\n        .then(() => {\n          self.items.push(tag);\n          events.trigger('tag-added', { $tag: tag });\n        })\n        .catch(() => {\n          if (tagText) {\n            events.trigger('invalid-tag', { $tag: tag });\n          }\n        });\n    };\n\n    self.remove = index => {\n      let tag = self.items[index];\n      return canRemoveTag(tag).then(() => {\n        self.items.splice(index, 1);\n        self.clearSelection();\n        events.trigger('tag-removed', { $tag: tag });\n        return tag;\n      });\n    };\n\n    self.select = index => {\n      if (index < 0) {\n        index = self.items.length - 1;\n      }\n      else if (index >= self.items.length) {\n        index = 0;\n      }\n\n      self.index = index;\n      self.selected = self.items[index];\n    };\n\n    self.selectPrior = () => {\n      self.select(--self.index);\n    };\n\n    self.selectNext = () => {\n      self.select(++self.index);\n    };\n\n    self.removeSelected = () => self.remove(self.index);\n\n    self.clearSelection = () => {\n      self.selected = null;\n      self.index = -1;\n    };\n\n    self.getItems = () => options.useStrings ? self.items.map(getTagText) : self.items;\n\n    self.clearSelection();\n\n    return self;\n  }\n\n  function validateType(type) {\n    return tiConstants.SUPPORTED_INPUT_TYPES.indexOf(type) !== -1;\n  }\n\n  return {\n    restrict: 'E',\n    require: 'ngModel',\n    scope: {\n      tags: '=ngModel',\n      text: '=?',\n      templateScope: '=?',\n      tagClass: '&',\n      onTagAdding: '&',\n      onTagAdded: '&',\n      onInvalidTag: '&',\n      onTagRemoving: '&',\n      onTagRemoved: '&',\n      onTagClicked: '&',\n    },\n    replace: false,\n    transclude: true,\n    templateUrl: 'ngTagsInput/tags-input.html',\n    controller($scope, $element, $attrs) {\n      'ngInject';\n\n      $scope.events = tiUtil.simplePubSub();\n\n      $scope.options = tagsInputConfig.load('tagsInput', $element, $attrs, $scope.events, {\n        template: [String, 'ngTagsInput/tag-item.html'],\n        type: [String, 'text', validateType],\n        placeholder: [String, 'Add a tag'],\n        tabindex: [Number, null],\n        removeTagSymbol: [String, String.fromCharCode(215)],\n        replaceSpacesWithDashes: [Boolean, true],\n        minLength: [Number, 3],\n        maxLength: [Number, tiConstants.MAX_SAFE_INTEGER],\n        addOnEnter: [Boolean, true],\n        addOnSpace: [Boolean, false],\n        addOnComma: [Boolean, true],\n        addOnBlur: [Boolean, true],\n        addOnPaste: [Boolean, false],\n        pasteSplitPattern: [RegExp, /,/],\n        allowedTagsPattern: [RegExp, /.+/],\n        enableEditingLastTag: [Boolean, false],\n        minTags: [Number, 0],\n        maxTags: [Number, tiConstants.MAX_SAFE_INTEGER],\n        displayProperty: [String, 'text'],\n        keyProperty: [String, ''],\n        allowLeftoverText: [Boolean, false],\n        addFromAutocompleteOnly: [Boolean, false],\n        spellcheck: [Boolean, true],\n        allowDblclickToEdit: [Boolean, false],\n        inputSplitPattern: [RegExp, null],\n        useStrings: [Boolean, false]\n      });\n\n      $scope.tagList = new TagList($scope.options, $scope.events,\n        tiUtil.handleUndefinedResult($scope.onTagAdding, true),\n        tiUtil.handleUndefinedResult($scope.onTagRemoving, true));\n\n      this.registerAutocomplete = () => ({\n        addTag: function (tag) {\n          return $scope.tagList.add(tag);\n        },\n        getTags: function () {\n          return $scope.tagList.items;\n        },\n        getCurrentTagText: function () {\n          return $scope.newTag.text();\n        },\n        getOptions: function () {\n          return $scope.options;\n        },\n        getTemplateScope: function () {\n          return $scope.templateScope;\n        },\n        on: function (name, handler) {\n          $scope.events.on(name, handler, true);\n          return this;\n        }\n      });\n\n      this.registerTagItem = () => ({\n        getOptions: function () {\n          return $scope.options;\n        },\n        removeTag: function (index) {\n          if ($scope.disabled) {\n            return;\n          }\n          $scope.tagList.remove(index);\n        }\n      });\n    },\n    link(scope, element, attrs, ngModelCtrl) {\n      let hotkeys = [tiConstants.KEYS.enter, tiConstants.KEYS.comma, tiConstants.KEYS.space, tiConstants.KEYS.backspace,\n        tiConstants.KEYS.delete, tiConstants.KEYS.left, tiConstants.KEYS.right];\n      let tagList = scope.tagList;\n      let events = scope.events;\n      let options = scope.options;\n      let input = element.find('input');\n      let validationOptions = ['minTags', 'maxTags', 'allowLeftoverText'];\n\n      let setElementValidity = () => {\n        ngModelCtrl.$setValidity('maxTags', tagList.items.length <= options.maxTags);\n        ngModelCtrl.$setValidity('minTags', tagList.items.length >= options.minTags);\n        ngModelCtrl.$setValidity('leftoverText', scope.hasFocus || options.allowLeftoverText ? true : !scope.newTag.text());\n      };\n\n      let focusInput = () => {\n        $timeout(() => { input[0].focus(); });\n      };\n\n      ngModelCtrl.$isEmpty = value => !value || !value.length;\n\n      scope.isEditing = false;\n\n      scope.editingTag = {\n        text(value) {\n          if (angular.isDefined(value)) {\n            scope.editingText = value;\n            events.trigger('edit-input-change', value);\n          } else {\n            return scope.editingText || '';\n          }\n        },\n        invalid: null\n      };\n\n      scope.newTag = {\n        text(value) {\n          if (angular.isDefined(value)) {\n            scope.text = value;\n            events.trigger('input-change', value);\n          }\n          else {\n            return scope.text || '';\n          }\n        },\n        invalid: null\n      };\n\n      scope.track = tag => tag[options.keyProperty || options.displayProperty];\n\n      scope.getTagClass = (tag, index) => {\n        let selected = tag === tagList.selected;\n        return [\n          scope.tagClass({ $tag: tag, $index: index, $selected: selected }),\n          { selected: selected }\n        ];\n      };\n\n      scope.$watch('tags', value => {\n        if (value) {\n          tagList.items = tiUtil.makeObjectArray(value, options.displayProperty);\n          if (options.useStrings) {\n            return;\n          }\n\n          scope.tags = tagList.items;\n        }\n        else {\n          tagList.items = [];\n        }\n      });\n\n      scope.$watch('tags.length', () => {\n        setElementValidity();\n\n        // ngModelController won't trigger validators when the model changes (because it's an array),\n        // so we need to do it ourselves. Unfortunately this won't trigger any registered formatter.\n        ngModelCtrl.$validate();\n      });\n\n      attrs.$observe('disabled', value => {\n        scope.disabled = value;\n      });\n\n      scope.eventHandlers = {\n        input: {\n          keydown($event) {\n            events.trigger('input-keydown', $event);\n          },\n          focus() {\n            if (scope.hasFocus) {\n              return;\n            }\n\n            scope.hasFocus = true;\n            events.trigger('input-focus');\n          },\n          blur() {\n            $timeout(() => {\n              let activeElement = $document.prop('activeElement');\n              let lostFocusToBrowserWindow = activeElement === input[0];\n              let lostFocusToChildElement = element[0].contains(activeElement);\n\n              if (lostFocusToBrowserWindow || !lostFocusToChildElement) {\n                scope.hasFocus = false;\n                events.trigger('input-blur');\n              }\n            });\n          },\n          editBlur($event, tag) {\n            events.trigger('edit-input-blur', tag);\n          },\n          paste($event) {\n            $event.getTextData = () => {\n              let clipboardData = $event.clipboardData || ($event.originalEvent && $event.originalEvent.clipboardData);\n              return clipboardData ? clipboardData.getData('text/plain') : $window.clipboardData.getData('Text');\n            };\n            events.trigger('input-paste', $event);\n          }\n        },\n        host: {\n          click() {\n            if (scope.disabled) {\n              return;\n            }\n            focusInput();\n          }\n        },\n        tag: {\n          click(tag) {\n            events.trigger('tag-clicked', { $tag: tag });\n          },\n          dblclick(tag) {\n            events.trigger('tag-dblclicked', tag);\n          }\n        }\n      };\n\n      events\n        .on('tag-added', scope.onTagAdded)\n        .on('invalid-tag', scope.onInvalidTag)\n        .on('tag-removed', scope.onTagRemoved)\n        .on('tag-clicked', scope.onTagClicked)\n        .on('tag-dblclicked', (tag) => {\n          if (options.allowDblclickToEdit) {\n            scope.editingTag.text(tag.text);\n            tag.editable = true;\n            scope.isEditing = true;\n          }\n        })\n        .on('tag-added', () => {\n          scope.newTag.text('');\n        })\n        .on('tag-added tag-removed', () => {\n          scope.tags = tagList.getItems();\n          // Ideally we should be able call $setViewValue here and let it in turn call $setDirty and $validate\n          // automatically, but since the model is an array, $setViewValue does nothing and it's up to us to do it.\n          // Unfortunately this won't trigger any registered $parser and there's no safe way to do it.\n          ngModelCtrl.$setDirty();\n          focusInput();\n        })\n        .on('invalid-tag', () => {\n          scope.newTag.invalid = true;\n        })\n        .on('option-change', e => {\n          if (validationOptions.indexOf(e.name) !== -1) {\n            setElementValidity();\n          }\n        })\n        .on('input-change', () => {\n          tagList.clearSelection();\n          scope.newTag.invalid = null;\n        })\n        .on('input-focus', () => {\n          element.triggerHandler('focus');\n          ngModelCtrl.$setValidity('leftoverText', true);\n        })\n        .on('input-blur', () => {\n          if (options.addOnBlur && !options.addFromAutocompleteOnly) {\n            let tags = scope.newTag.text().split(options.inputSplitPattern);\n            tagList.addTextArr(tags);\n          }\n          element.triggerHandler('blur');\n          setElementValidity();\n        })\n        .on('edit-input-blur', tag => {\n          let editingText = scope.editingTag.text();\n          let tags = editingText.split(options.inputSplitPattern);\n          let firstTagText = tags.shift();\n          tag.text = firstTagText;\n          tagList.addTextArr(tags);\n          tag.editable = false;\n          scope.isEditing = false;\n          focusInput();\n        })\n        .on('edit-input-change', () => {\n          tagList.clearSelection();\n          scope.editingTag.invalid = null;\n        })\n        .on('input-keydown', event => {\n          let key = event.keyCode;\n\n          if (tiUtil.isModifierOn(event) || hotkeys.indexOf(key) === -1) {\n            return;\n          }\n\n          let addKeys = {\n            [tiConstants.KEYS.enter]: options.addOnEnter,\n            [tiConstants.KEYS.comma]: options.addOnComma,\n            [tiConstants.KEYS.space]: options.addOnSpace\n          };\n\n          let shouldAdd = !options.addFromAutocompleteOnly && addKeys[key];\n          let shouldRemove = (key === tiConstants.KEYS.backspace || key === tiConstants.KEYS.delete) && tagList.selected;\n          let shouldEditLastTag = key === tiConstants.KEYS.backspace && scope.newTag.text().length === 0 && options.enableEditingLastTag && !scope.isEditing;\n          let shouldSelect = (key === tiConstants.KEYS.backspace || key === tiConstants.KEYS.left || key === tiConstants.KEYS.right) &&\n            scope.newTag.text().length === 0 && !options.enableEditingLastTag;\n\n          if (shouldAdd) {\n            if (scope.isEditing) {\n              element.find('input')[0].blur();\n              return;\n            }\n            let tags = scope.newTag.text().split(options.inputSplitPattern);\n            tagList.addTextArr(tags);\n          }\n          else if (shouldEditLastTag) {\n            tagList.selectPrior();\n            tagList.removeSelected().then(tag => {\n              if (tag) {\n                scope.newTag.text(tag[options.displayProperty]);\n              }\n            });\n          }\n          else if (shouldRemove) {\n            tagList.removeSelected();\n          }\n          else if (shouldSelect) {\n            if (key === tiConstants.KEYS.left || key === tiConstants.KEYS.backspace) {\n              tagList.selectPrior();\n            }\n            else if (key === tiConstants.KEYS.right) {\n              tagList.selectNext();\n            }\n          }\n\n          if (shouldAdd || shouldSelect || shouldRemove || shouldEditLastTag) {\n            event.preventDefault();\n          }\n        })\n        .on('input-paste', event => {\n          if (options.addOnPaste) {\n            let data = event.getTextData();\n            let tags = data.split(options.pasteSplitPattern);\n\n            if (tags.length > 1) {\n              tagList.addTextArr(tags);\n              event.preventDefault();\n            }\n          }\n        });\n    }\n  };\n}\n\n","/**\n * @ngdoc directive\n * @name tiTagItem\n * @module ngTagsInput\n *\n * @description\n * Represents a tag item. Used internally by the tagsInput directive.\n */\nexport default function TagItemDirective(tiUtil) {\n  'ngInject';\n\n  return {\n    restrict: 'E',\n    require: '^tagsInput',\n    template: '<ng-include src=\"$$template\"></ng-include>',\n    scope: {\n      $scope: '=scope',\n      data: '='\n    },\n    link(scope, element, attrs, tagsInputCtrl) {\n      let tagsInput = tagsInputCtrl.registerTagItem();\n      let options = tagsInput.getOptions();\n\n      scope.$$template = options.template;\n      scope.$$removeTagSymbol = options.removeTagSymbol;\n\n      scope.$getDisplayText = () => tiUtil.safeToString(scope.data[options.displayProperty]);\n      scope.$removeTag = () => {\n        tagsInput.removeTag(scope.$index);\n      };\n\n      scope.$watch('$parent.$index', value => {\n        scope.$index = value;\n      });\n    }\n  };\n}\n","/**\n * @ngdoc directive\n * @name autoComplete\n * @module ngTagsInput\n *\n * @description\n * Provides autocomplete support for the tagsInput directive.\n *\n * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\n *    $query. The result of the expression must be a promise that eventually resolves to an array of strings.\n * @param {string=} [template=NA] URL or id of a custom template for rendering each element of the autocomplete list.\n * @param {string=} [displayProperty=tagsInput.displayText] Property to be rendered as the autocomplete label.\n * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\n *    the source option after the last keystroke.\n * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\n *    in the source option.\n * @param {boolean=} [addOnTab=true] Flag indicating that the selected match will be automatically selected once\n *    the tab key is pressed.\n * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\n *    suggestions list.\n * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\n * @param {boolean=} [loadOnDownArrow=false] Flag indicating that the source option will be evaluated when the down arrow\n *    key is pressed and the suggestion list is closed. The current input value is available as $query.\n * @param {boolean=} [loadOnEmpty=false] Flag indicating that the source option will be evaluated when the input content\n *    becomes empty. The $query variable will be passed to the expression as an empty string.\n * @param {boolean=} [loadOnFocus=false] Flag indicating that the source option will be evaluated when the input element\n *    gains focus. The current input value is available as $query.\n * @param {boolean=} [selectFirstMatch=true] Flag indicating that the first match will be automatically selected once\n *    the suggestion list is shown.\n * @param {expression=} [matchClass=NA] Expression to evaluate for each match in order to get the CSS classes to be used.\n *    The expression is provided with the current match as $match, its index as $index and its state as $selected. The result\n *    of the evaluation must be one of the values supported by the ngClass directive (either a string, an array or an object).\n *    See https://docs.angularjs.org/api/ng/directive/ngClass for more information.\n */\nexport default function AutocompleteDirective($document, $timeout, $sce, $q, tagsInputConfig, tiUtil, tiConstants) {\n  'ngInject';\n\n  function SuggestionList(loadFn, options, events) {\n    let self = {};\n    let lastPromise = null;\n\n    let getTagId = () => options.tagsInput.keyProperty || options.tagsInput.displayProperty;\n\n    let getDifference = function(array1, array2) {\n      return array1.filter(item => !tiUtil.findInObjectArray(array2, item, getTagId(), (a, b) =>{\n        if (options.tagsInput.replaceSpacesWithDashes) {\n          a = tiUtil.replaceSpacesWithDashes(a);\n          b = tiUtil.replaceSpacesWithDashes(b);\n        }\n        return tiUtil.defaultComparer(a, b);\n      }));\n    };\n\n    self.reset = () => {\n      lastPromise = null;\n\n      self.items = [];\n      self.visible = false;\n      self.index = -1;\n      self.selected = null;\n      self.query = null;\n    };\n\n    self.show = () => {\n      if (options.selectFirstMatch) {\n        self.select(0);\n      }\n      else {\n        self.selected = null;\n      }\n      self.visible = true;\n    };\n\n    self.load = tiUtil.debounce((query, tags) => {\n      self.query = query;\n\n      let promise = $q.when(loadFn({ $query: query }));\n      lastPromise = promise;\n\n      promise.then(items => {\n        if (promise !== lastPromise) {\n          return;\n        }\n\n        items = tiUtil.makeObjectArray(items.data || items, getTagId());\n        items = getDifference(items, tags);\n        self.items = items.slice(0, options.maxResultsToShow);\n\n        if (self.items.length > 0) {\n          self.show();\n        }\n        else {\n          self.reset();\n        }\n      });\n    }, options.debounceDelay);\n\n    self.selectNext = () => {\n      self.select(++self.index);\n    };\n\n    self.selectPrior = () => {\n      self.select(--self.index);\n    };\n\n    self.select = index => {\n      if (index < 0) {\n        index = self.items.length - 1;\n      }\n      else if (index >= self.items.length) {\n        index = 0;\n      }\n      self.index = index;\n      self.selected = self.items[index];\n      events.trigger('suggestion-selected', index);\n    };\n\n    self.reset();\n\n    return self;\n  }\n\n  function scrollToElement(root, index) {\n    let element = root.find('li').eq(index);\n    let parent = element.parent();\n    let elementTop = element.prop('offsetTop');\n    let elementHeight = element.prop('offsetHeight');\n    let parentHeight = parent.prop('clientHeight');\n    let parentScrollTop = parent.prop('scrollTop');\n\n    if (elementTop < parentScrollTop) {\n      parent.prop('scrollTop', elementTop);\n    }\n    else if (elementTop + elementHeight > parentHeight + parentScrollTop) {\n      parent.prop('scrollTop', elementTop + elementHeight - parentHeight);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    require: '^tagsInput',\n    scope: {\n      source: '&',\n      matchClass: '&'\n    },\n    templateUrl: 'ngTagsInput/auto-complete.html',\n    controller($scope, $element, $attrs) {\n      'ngInject';\n\n      $scope.events = tiUtil.simplePubSub();\n\n      $scope.options = tagsInputConfig.load('autoComplete', $element, $attrs, $scope.events, {\n        template: [String, 'ngTagsInput/auto-complete-match.html'],\n        debounceDelay: [Number, 100],\n        minLength: [Number, 3],\n        highlightMatchedText: [Boolean, true],\n        maxResultsToShow: [Number, 10],\n        loadOnDownArrow: [Boolean, false],\n        loadOnEmpty: [Boolean, false],\n        loadOnFocus: [Boolean, false],\n        selectFirstMatch: [Boolean, true],\n        displayProperty: [String, '']\n      });\n\n      $scope.suggestionList = new SuggestionList($scope.source, $scope.options, $scope.events);\n\n      this.registerAutocompleteMatch = () => ({\n        getOptions: function () {\n          return $scope.options;\n        },\n        getQuery: function () {\n          return $scope.suggestionList.query;\n        }\n      });\n    },\n    link(scope, element, attrs, tagsInputCtrl) {\n      let hotkeys = [tiConstants.KEYS.enter, tiConstants.KEYS.tab, tiConstants.KEYS.escape, tiConstants.KEYS.up, tiConstants.KEYS.down];\n      let suggestionList = scope.suggestionList;\n      let tagsInput = tagsInputCtrl.registerAutocomplete();\n      let options = scope.options;\n      let events = scope.events;\n\n      options.tagsInput = tagsInput.getOptions();\n\n      let shouldLoadSuggestions = value => value && value.length >= options.minLength || !value && options.loadOnEmpty;\n\n      scope.templateScope = tagsInput.getTemplateScope();\n\n      scope.addSuggestionByIndex = index => {\n        suggestionList.select(index);\n        scope.addSuggestion();\n      };\n\n      scope.addSuggestion = () => {\n        let added = false;\n\n        if (suggestionList.selected) {\n          tagsInput.addTag(angular.copy(suggestionList.selected));\n          suggestionList.reset();\n          added = true;\n        }\n        return added;\n      };\n\n      scope.track = item => item[options.tagsInput.keyProperty || options.tagsInput.displayProperty];\n\n      scope.getSuggestionClass = (item, index) => {\n        let selected = item === suggestionList.selected;\n        return [\n          scope.matchClass({$match: item, $index: index, $selected: selected}),\n                    { selected: selected }\n        ];\n      };\n\n      tagsInput\n        .on('tag-added tag-removed invalid-tag input-blur', () => {\n          suggestionList.reset();\n        })\n        .on('input-change', value => {\n          if (shouldLoadSuggestions(value)) {\n            suggestionList.load(value, tagsInput.getTags());\n          }\n          else {\n            suggestionList.reset();\n          }\n        })\n        .on('input-focus', () => {\n          let value = tagsInput.getCurrentTagText();\n          if (options.loadOnFocus && shouldLoadSuggestions(value)) {\n            suggestionList.load(value, tagsInput.getTags());\n          }\n        })\n        .on('input-keydown', event => {\n          let key = event.keyCode;\n          let handled = false;\n\n          if (tiUtil.isModifierOn(event) || hotkeys.indexOf(key) === -1) {\n            return;\n          }\n\n          if (suggestionList.visible) {\n\n            if (key === tiConstants.KEYS.down) {\n              suggestionList.selectNext();\n              handled = true;\n            }\n            else if (key === tiConstants.KEYS.up) {\n              suggestionList.selectPrior();\n              handled = true;\n            }\n            else if (key === tiConstants.KEYS.escape) {\n              suggestionList.reset();\n              handled = true;\n            }\n            else if (key === tiConstants.KEYS.enter || key === tiConstants.KEYS.tab) {\n              handled = scope.addSuggestion();\n            }\n          }\n          else {\n            if (key === tiConstants.KEYS.down && scope.options.loadOnDownArrow) {\n              suggestionList.load(tagsInput.getCurrentTagText(), tagsInput.getTags());\n              handled = true;\n            }\n          }\n\n          if (handled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            return false;\n          }\n        });\n\n      events.on('suggestion-selected', index => {\n        scrollToElement(element, index);\n      });\n    }\n  };\n}\n","/**\n * @ngdoc directive\n * @name tiAutocompleteMatch\n * @module ngTagsInput\n *\n * @description\n * Represents an autocomplete match. Used internally by the autoComplete directive.\n */\nexport default function AutocompleteMatchDirective($sce, tiUtil) {\n  'ngInject';\n\n  return {\n    restrict: 'E',\n    require: '^autoComplete',\n    template: '<ng-include src=\"$$template\"></ng-include>',\n    scope: {\n      $scope: '=scope',\n      data: '='\n    },\n    link(scope, element, attrs, autoCompleteCtrl) {\n      let autoComplete = autoCompleteCtrl.registerAutocompleteMatch();\n      let options = autoComplete.getOptions();\n\n      scope.$$template = options.template;\n      scope.$index = scope.$parent.$index;\n\n      scope.$highlight = text => {\n        if (options.highlightMatchedText) {\n          text = tiUtil.safeHighlight(text, autoComplete.getQuery());\n        }\n        return $sce.trustAsHtml(text);\n      };\n\n      scope.$getDisplayText = () => tiUtil.safeToString(scope.data[options.displayProperty || options.tagsInput.displayProperty]);\n    }\n  };\n}\n","/**\n * @ngdoc directive\n * @name tiAutosize\n * @module ngTagsInput\n *\n * @description\n * Automatically sets the input's width so its content is always visible. Used internally by tagsInput directive.\n */\nexport default function AutosizeDirective(tagsInputConfig) {\n  'ngInject';\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link(scope, element, attrs, ctrl) {\n      let threshold = tagsInputConfig.getTextAutosizeThreshold();\n      let span = angular.element('<span class=\"input\"></span>');\n\n      span.css('display', 'none')\n          .css('visibility', 'hidden')\n          .css('width', 'auto')\n          .css('white-space', 'pre');\n\n      element.parent().append(span);\n\n      let resize = originalValue => {\n        let value = originalValue;\n        let width;\n\n        if (angular.isString(value) && value.length === 0) {\n          value = attrs.placeholder;\n        }\n\n        if (value) {\n          span.text(value);\n          span.css('display', '');\n          width = span.prop('offsetWidth');\n          span.css('display', 'none');\n        }\n\n        element.css('width', width ? width + threshold + 'px' : '');\n\n        return originalValue;\n      };\n\n      ctrl.$parsers.unshift(resize);\n      ctrl.$formatters.unshift(resize);\n\n      attrs.$observe('placeholder', value => {\n        if (!ctrl.$modelValue) {\n          resize(value);\n        }\n      });\n    }\n  };\n}","/**\n * @ngdoc directive\n * @name tiBindAttrs\n * @module ngTagsInput\n *\n * @description\n * Binds attributes to expressions. Used internally by tagsInput directive.\n */\nexport default function BindAttributesDirective() {\n  return (scope, element, attrs) => {\n    scope.$watch(attrs.tiBindAttrs, value => {\n      angular.forEach(value, (value, key) => {\n        attrs.$set(key, value);\n      });\n    }, true);\n  };\n}","/**\n * @ngdoc directive\n * @name tiSelectall\n * @module ngTagsInput\n *\n * @description\n * Automatically select all and focus the input. Used internally by tagsInput directive.\n */\n\nexport default function SelectallDirective($timeout, $parse) {\n  'ngInject';\n  return {\n    scope: {},\n    link(scope, element, attrs) {\n      scope.selectAll = false;\n      let model = $parse(attrs.tiSelectall);\n      let selectAll = () => {\n        $timeout(() => {\n          element[0].focus();\n          element[0].select();\n        });\n      };\n      scope.$watch(model, (value) =>{\n        if (value === true) {\n          selectAll();\n        }\n        scope.selectAll = value;\n      });\n    }\n  };\n}","/**\n * @ngdoc directive\n * @name tiTranscludeAppend\n * @module ngTagsInput\n *\n * @description\n * Re-creates the old behavior of ng-transclude. Used internally by tagsInput directive.\n */\nexport default function TranscludeAppendDirective() {\n  return (scope, element, attrs, ctrl, transcludeFn) => {\n    transcludeFn(clone => {\n      element.append(clone);\n    });\n  };\n}","/**\n * @ngdoc service\n * @name tagsInputConfig\n * @module ngTagsInput\n *\n * @description\n * Sets global configuration settings for both tagsInput and autoComplete directives. It's also used internally to parse and\n *  initialize options from HTML attributes.\n */\nexport default function TagsInputConfigurationProvider() {\n  'ngInject';\n\n  let globalDefaults = {};\n  let interpolationStatus = {};\n  let autosizeThreshold = 3;\n\n  /**\n   * @ngdoc method\n   * @name tagsInputConfig#setDefaults\n   * @description Sets the default configuration option for a directive.\n   *\n   * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n   * @param {object} defaults Object containing options and their values.\n   *\n   * @returns {object} The service itself for chaining purposes.\n   */\n  this.setDefaults = (directive, defaults) => {\n    globalDefaults[directive] = defaults;\n    return this;\n  };\n\n  /**\n   * @ngdoc method\n   * @name tagsInputConfig#setActiveInterpolation\n   * @description Sets active interpolation for a set of options.\n   *\n   * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n   * @param {object} options Object containing which options should have interpolation turned on at all times.\n   *\n   * @returns {object} The service itself for chaining purposes.\n   */\n  this.setActiveInterpolation = (directive, options) => {\n    interpolationStatus[directive] = options;\n    return this;\n  };\n\n  /**\n   * @ngdoc method\n   * @name tagsInputConfig#setTextAutosizeThreshold\n   * @description Sets the threshold used by the tagsInput directive to re-size the inner input field element based on its contents.\n   *\n   * @param {number} threshold Threshold value, in pixels.\n   *\n   * @returns {object} The service itself for chaining purposes.\n   */\n  this.setTextAutosizeThreshold = threshold => {\n    autosizeThreshold = threshold;\n    return this;\n  };\n\n  this.$get = $interpolate => {\n    'ngInject';\n\n    let converters = {\n      [String]: value => value.toString(),\n      [Number]: value => parseInt(value, 10),\n      [Boolean]: value => value.toLowerCase() === 'true',\n      [RegExp]: value => new RegExp(value)\n    };\n\n    return {\n      load(directive, element, attrs, events, optionDefinitions) {\n        let defaultValidator = () => true;\n        let options = {};\n\n        angular.forEach(optionDefinitions, (value, key) => {\n          let type = value[0];\n          let localDefault = value[1];\n          let validator = value[2] || defaultValidator;\n          let converter = converters[type];\n\n          let getDefault = () => {\n            let globalValue = globalDefaults[directive] && globalDefaults[directive][key];\n            return angular.isDefined(globalValue) ? globalValue : localDefault;\n          };\n\n          let updateValue = value => {\n            options[key] = value && validator(value) ? converter(value) : getDefault();\n          };\n\n          if (interpolationStatus[directive] && interpolationStatus[directive][key]) {\n            attrs.$observe(key, value => {\n              updateValue(value);\n              events.trigger('option-change', { name: key, newValue: value });\n            });\n          }\n          else {\n            updateValue(attrs[key] && $interpolate(attrs[key])(element.scope()));\n          }\n        });\n\n        return options;\n      },\n      getTextAutosizeThreshold() {\n        return autosizeThreshold;\n      }\n    };\n  };\n}\n","/***\n * @ngdoc service\n * @name tiUtil\n * @module ngTagsInput\n *\n * @description\n * Helper methods used internally by the directive. Should not be called directly from user code.\n */\nexport default function UtilService($timeout, $q) {\n  'ngInject';\n\n  let self = {};\n\n  self.debounce = (fn, delay) => {\n    let timeoutId;\n    return function(...args) {\n      $timeout.cancel(timeoutId);\n      timeoutId = $timeout(function() { fn.apply(null, args); }, delay);\n    };\n  };\n\n  self.makeObjectArray = (array, key) => {\n    if (!angular.isArray(array) || array.length === 0 || angular.isObject(array[0])) {\n      return array;\n    }\n\n    return array.map(item => ({ [key]: item }));\n  };\n\n  self.findInObjectArray = (array, obj, key, comparer) => {\n    let item = null;\n    comparer = comparer || self.defaultComparer;\n\n    array.some(element => {\n      if (comparer(element[key], obj[key])) {\n        item = element;\n        return true;\n      }\n    });\n\n    return item;\n  };\n\n  self.defaultComparer = (a, b) => {\n    // I'm aware of the internationalization issues regarding toLowerCase()\n    // but I couldn't come up with a better solution right now\n    return self.safeToString(a).toLowerCase() === self.safeToString(b).toLowerCase();\n  };\n\n  self.safeHighlight = (str, value) => {\n    str = self.encodeHTML(str);\n    value = self.encodeHTML(value);\n\n    if (!value) {\n      return str;\n    }\n\n    let escapeRegexChars = str => str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n    let expression = new RegExp('&[^;]+;|' + escapeRegexChars(value), 'gi');\n\n    return str.replace(expression, match => match.toLowerCase() === value.toLowerCase() ? '<em>' + match + '</em>' : match);\n  };\n\n  self.safeToString = value => angular.isUndefined(value) || value === null ? '' : value.toString().trim();\n\n  self.encodeHTML = value => self.safeToString(value).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n  self.handleUndefinedResult = (fn, valueIfUndefined) => {\n    return function () {\n      let result = fn.apply(null, arguments);\n      return angular.isUndefined(result) ? valueIfUndefined : result;\n    };\n  };\n\n  self.replaceSpacesWithDashes = str => self.safeToString(str).replace(/\\s/g, '-');\n\n  self.isModifierOn = event => event.shiftKey || event.ctrlKey || event.altKey || event.metaKey;\n\n  self.promisifyValue = value => {\n    value = angular.isUndefined(value) ? true : value;\n    return $q[value ? 'when' : 'reject']();\n  };\n\n  self.simplePubSub = function() {\n    let events = {};\n    return {\n      on(names, handler, first) {\n        names.split(' ').forEach(name => {\n          if (!events[name]) {\n            events[name] = [];\n          }\n          let method = first ? [].unshift : [].push;\n          method.call(events[name], handler);\n        });\n        return this;\n      },\n      trigger(name, args) {\n        let handlers = events[name] || [];\n        handlers.every(handler => self.handleUndefinedResult(handler, true)(args));\n        return this;\n      }\n    };\n  };\n\n  return self;\n}\n","/*@ngInject*/\nexport default function TemplateCacheRegister($templateCache) {\n    $templateCache.put('ngTagsInput/auto-complete-match.html',\n    \"<span ng-bind-html=\\\"$highlight($getDisplayText())\\\"></span>\"\n  );\n  $templateCache.put('ngTagsInput/auto-complete.html',\n    \"<div class=\\\"autocomplete\\\" ng-if=\\\"suggestionList.visible\\\"><ul class=\\\"suggestion-list\\\"><li class=\\\"suggestion-item\\\" ng-repeat=\\\"item in suggestionList.items track by track(item)\\\" ng-class=\\\"getSuggestionClass(item, $index)\\\" ng-click=\\\"addSuggestionByIndex($index)\\\" ng-mouseenter=\\\"suggestionList.select($index)\\\"><ti-autocomplete-match scope=\\\"templateScope\\\" data=\\\"::item\\\"></ti-autocomplete-match></li></ul></div>\"\n  );\n  $templateCache.put('ngTagsInput/tag-item.html',\n    \"<span ng-bind=\\\"$getDisplayText()\\\"></span> <a class=\\\"remove-button\\\" ng-click=\\\"$removeTag()\\\" ng-bind=\\\"::$$removeTagSymbol\\\"></a>\"\n  );\n  $templateCache.put('ngTagsInput/tags-input.html',\n    \"<div class=\\\"host\\\" tabindex=\\\"-1\\\" ng-click=\\\"eventHandlers.host.click()\\\" ti-transclude-append><div class=\\\"tags\\\" ng-class=\\\"{focused: hasFocus}\\\"><ul class=\\\"tag-list\\\"><li ng-repeat=\\\"tag in tagList.items track by track(tag)\\\" ng-class=\\\"getTagClass(tag, $index)\\\" ng-click=\\\"eventHandlers.tag.click(tag)\\\" ng-dblclick=\\\"eventHandlers.tag.dblclick(tag)\\\"><ti-tag-item class=\\\"tag-item\\\" scope=\\\"templateScope\\\" data=\\\"tag\\\" ng-hide=\\\"tag.editable\\\"></ti-tag-item><input class=\\\"input\\\" autocomplete=\\\"off\\\" ng-model=\\\"editingTag.text\\\" ng-model-options=\\\"{getterSetter: true}\\\" ng-click=\\\"$event.stopPropagation();\\\" ng-if=\\\"tag.editable\\\" ng-keydown=\\\"eventHandlers.input.keydown($event)\\\" ng-blur=\\\"eventHandlers.input.editBlur($event,tag)\\\" ng-paste=\\\"eventHandlers.input.paste($event)\\\" ng-disabled=\\\"disabled\\\" ng-class=\\\"{'invalid-tag': editingTag.invalid}\\\" ti-selectall=\\\"true\\\" ti-autosize=\\\"\\\"></li></ul><input class=\\\"input\\\" autocomplete=\\\"off\\\" ng-model=\\\"newTag.text\\\" ng-model-options=\\\"{getterSetter: true}\\\" ng-keydown=\\\"eventHandlers.input.keydown($event)\\\" ng-focus=\\\"eventHandlers.input.focus($event)\\\" ng-blur=\\\"eventHandlers.input.blur($event)\\\" ng-paste=\\\"eventHandlers.input.paste($event)\\\" ng-trim=\\\"false\\\" ng-class=\\\"{'invalid-tag': newTag.invalid}\\\" ng-disabled=\\\"disabled\\\" ti-bind-attrs=\\\"{type: options.type, placeholder: options.placeholder, tabindex: options.tabindex, spellcheck: options.spellcheck}\\\" ti-autosize></div></div>\"\n  );\n}","import * as angular from 'angular';\nimport Constants from './constants';\nimport TagsInputDirective from './tags-input';\nimport TagItemDirective from './tag-item';\nimport AutocompleteDirective from './auto-complete';\nimport AutocompleteMatchDirective from './auto-complete-match';\nimport AutosizeDirective from './autosize';\nimport BindAttributesDirective from './bind-attrs';\nimport SelectallDirective from './selectall';\nimport TranscludeAppendDirective from './transclude-append';\nimport TagsInputConfigurationProvider from './configuration';\nimport UtilService from './util';\nimport TemplateCacheRegister from 'compiled-templates';\n\nangular.module('ngTagsInput', [])\n    .directive('tagsInput', TagsInputDirective)\n    .directive('tiTagItem', TagItemDirective)\n    .directive('autoComplete', AutocompleteDirective)\n    .directive('tiAutocompleteMatch', AutocompleteMatchDirective)\n    .directive('tiAutosize', AutosizeDirective)\n    .directive('tiBindAttrs', BindAttributesDirective)\n    .directive('tiTranscludeAppend', TranscludeAppendDirective)\n    .directive('tiSelectall', SelectallDirective)\n    .factory('tiUtil', UtilService)\n    .constant('tiConstants', Constants)\n    .provider('tagsInputConfig', TagsInputConfigurationProvider)\n    .run(TemplateCacheRegister);"],"names":["TagsInputDirective","$timeout","$document","$window","$q","tagsInputConfig","tiUtil","tiConstants","TagList","options","events","onTagAdding","onTagRemoving","self","getTagText","safeToString","tag","displayProperty","setTagText","text","canAddTag","tagText","valid","length","minLength","maxLength","allowedTagsPattern","test","findInObjectArray","items","keyProperty","when","$tag","then","promisifyValue","canRemoveTag","addText","add","addTextArr","forEach","replaceSpacesWithDashes","push","trigger","catch","remove","index","splice","clearSelection","select","selected","selectPrior","selectNext","removeSelected","getItems","useStrings","map","validateType","type","SUPPORTED_INPUT_TYPES","indexOf","$scope","$element","$attrs","simplePubSub","load","String","Number","fromCharCode","Boolean","MAX_SAFE_INTEGER","RegExp","tagList","handleUndefinedResult","registerAutocomplete","newTag","templateScope","name","handler","on","registerTagItem","disabled","scope","element","attrs","ngModelCtrl","hotkeys","KEYS","enter","comma","space","backspace","delete","left","right","input","find","validationOptions","setElementValidity","$setValidity","maxTags","minTags","hasFocus","allowLeftoverText","focusInput","focus","$isEmpty","value","isEditing","editingTag","angular","isDefined","editingText","track","getTagClass","tagClass","$index","$selected","$watch","makeObjectArray","tags","$validate","$observe","eventHandlers","$event","activeElement","prop","lostFocusToBrowserWindow","lostFocusToChildElement","contains","getTextData","clipboardData","originalEvent","getData","onTagAdded","onInvalidTag","onTagRemoved","onTagClicked","allowDblclickToEdit","editable","$setDirty","invalid","e","triggerHandler","addOnBlur","addFromAutocompleteOnly","split","inputSplitPattern","firstTagText","shift","key","event","keyCode","isModifierOn","addKeys","addOnEnter","addOnComma","addOnSpace","shouldAdd","shouldRemove","shouldEditLastTag","enableEditingLastTag","shouldSelect","blur","preventDefault","addOnPaste","data","pasteSplitPattern","TagItemDirective","tagsInputCtrl","tagsInput","getOptions","$$template","template","$$removeTagSymbol","removeTagSymbol","$getDisplayText","$removeTag","removeTag","AutocompleteDirective","$sce","SuggestionList","loadFn","lastPromise","getTagId","getDifference","array1","array2","filter","item","a","b","defaultComparer","reset","visible","query","show","selectFirstMatch","debounce","promise","$query","slice","maxResultsToShow","debounceDelay","scrollToElement","root","eq","parent","elementTop","elementHeight","parentHeight","parentScrollTop","suggestionList","source","registerAutocompleteMatch","tab","escape","up","down","shouldLoadSuggestions","loadOnEmpty","getTemplateScope","addSuggestionByIndex","addSuggestion","added","addTag","copy","getSuggestionClass","matchClass","$match","getTags","getCurrentTagText","loadOnFocus","handled","loadOnDownArrow","stopImmediatePropagation","AutocompleteMatchDirective","autoCompleteCtrl","autoComplete","$parent","$highlight","highlightMatchedText","safeHighlight","getQuery","trustAsHtml","AutosizeDirective","ctrl","threshold","getTextAutosizeThreshold","span","css","append","resize","originalValue","width","isString","placeholder","$parsers","unshift","$formatters","$modelValue","BindAttributesDirective","tiBindAttrs","$set","SelectallDirective","$parse","selectAll","model","tiSelectall","TranscludeAppendDirective","transcludeFn","clone","TagsInputConfigurationProvider","globalDefaults","interpolationStatus","autosizeThreshold","setDefaults","directive","defaults","setActiveInterpolation","setTextAutosizeThreshold","$get","converters","toString","parseInt","toLowerCase","optionDefinitions","defaultValidator","localDefault","validator","converter","getDefault","globalValue","updateValue","newValue","$interpolate","UtilService","fn","delay","timeoutId","args","cancel","apply","array","isArray","isObject","obj","comparer","some","str","encodeHTML","escapeRegexChars","replace","expression","match","isUndefined","trim","valueIfUndefined","result","arguments","shiftKey","ctrlKey","altKey","metaKey","names","first","method","call","handlers","every","TemplateCacheRegister","$templateCache","put","factory","constant","Constants","provider","run"],"mappings":"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"}